#!/bin/sh

if [ "$1" = -h ] ; then
    echo "usage: $0 [-e|-u]"
    exit 1
fi

# Locate the cache file.
cache_home=${XDG_CACHE_HOME:-"$HOME/.cache"}
if [ -d "$cache_home" ] ; then
    cache=$cache_home/dmenu_desktop
else
    cache=$HOME/.dmenu_desktop
fi

if [ "$1" = -e ] ; then
    # Run the application named on stdin.
    # The cache file must exist and is not updated.
    if [ ! -f "$cache" ] ; then
        echo "Application cache not found. Run \"$0 -u\" first." >&2
        exit 1
    fi
    read -r name || exit 1
    export name
    match=$(awk -F ';\t' \
        'function unescape(str) {
            gsub(/\\s/, " ", str)
            gsub(/\\n/, "\n", str)
            gsub(/\\t/, "\t", str)
            gsub(/\\r/, "\r", str)
            gsub(/\\\\/, "\\", str)
            return str
        }
        $1 == ENVIRON["name"] {OFS=FS; print unescape($2), unescape($3); exit}' \
        "$cache")
    unset name
    [ -n "$match" ] || exit 1
    path=${match%%;	*} # NB: literal tab
    cmd=${match#*;	}  # dito
    if [ -n "$path" ] ; then
        cd "$path" || exit 1
    fi
    eval "$cmd"
    exit
fi

data_dirs=${XDG_DATA_HOME:-"$HOME/.local/share"}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}

# Test whether the list of .desktop files has changed (the files themselves are not tested).
_needs_update () {
    old_IFS=$IFS
    IFS=:
    for dir in $data_dirs ; do
        dir=$dir/applications
        if [ -d "$dir" ] && [ "$dir" -nt "$cache" ] ; then
            IFS=$old_IFS
            return 0
        fi
    done
    IFS=$old_IFS
    return 1
}

# Find all relevant .desktop files and transform them into a single-line format.
_collect () {
    parse='/^\[/ {de=0} /^\[Desktop Entry\]/ {de=1}
(de && /^[^#].*=/) {
    match($0, /[ \t]*=[ \t]*/)
    kv[substr($0, 1, RSTART-1)] = substr($0, RSTART+RLENGTH)
}
END {
    OFS = ";\t"
    if (kv["Type"] == "Application" && kv["NoDisplay"] != "true") {
        name = kv["Name"]
        gsub(/\\[nrst]/, " ", name)
        gsub(/\\\\/, "\\", name)
        exec = kv["Exec"]
        gsub(/%[a-zA-Z]/, "", exec)
        gsub(/%%/, "%", exec)
        if (kv["Terminal"] == "true")
            exec = "${RUN_TERMINAL_APP:-false} " exec
        print name, kv["Path"], exec
    }
}'
    old_IFS=$IFS
    IFS=:
    for dir in $data_dirs ; do
        dir=$dir/applications
        [ -d "$dir" ] && find -L "$dir" -type f -name "*.desktop" -exec awk "$parse" \{\} \;
    done
    IFS=$old_IFS
    unset parse
}

# Update the cache if necessary, or if -u was given.
if [ "$1" = -u ] || _needs_update ; then
    _collect | sort -u -t \; -k 1,1 > "$cache"
    [ "$1" = -u ] && exit
fi

# Default action: print the names of all applications to stdout.
awk -F ';\t' '{print $1}' "$cache"
